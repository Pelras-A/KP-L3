##########################################TEMP###############################################
load("RES.RData")
table_resultats <- read.csv("table_resultats.csv")
View(table_resultats)
rm(tmp)
tmp <- table_resultats$X
table_resultats <- data.frame(table_resultats[,-1])
row.names(table_resultats) <- tmp
rm(tmp)
View(table_resultats)
TIME <- read.csv("TIME.csv")
View(TIME)
shiny::runApp()
runApp()
runApp()
library(RISCA)
runApp()
runApp()
runApp()
library(ggiraph)
install.packages("ggiraph")
install.packages("ggiraph")
library(ggiraph)
#Installation de highcharter
install.packages("highcharter", repos = "http://cran.us.r-project.org")
#Chargement du package dans la session R
library(highcharter)
runApp('J:/4-Méthodologiste/Antoine/GITHUB/KP-L3/APPLICATION')
library(ggplot2)
runApp('J:/4-Méthodologiste/Antoine/GITHUB/KP-L3/APPLICATION')
runApp('J:/4-Méthodologiste/Antoine/GITHUB/KP-L3/APPLICATION')
library(ggiraph)
library(ggplot2)
graph <- function(X){
ggplot(model_final(X)$table,aes(x = time, y = pred)) +
geom_step(color ="dodgerblue1" )+
labs(
x = "Survival time (months)",
y = "Progression-free survival") +
theme_linedraw() +
ylim(c(0,1)) +
geom_point_interactive(aes(tooltip = stations), size = 2)
# Voir la description de cette ligne de commande juste en dessous du graphique.
ggiraph(code = print(graph))
}
x <- reactive(input$NMSD)
NMSD1 <- reactive( if (x()=="1") 1 else 0 )
NMSD2 <- reactive( if (x()=="2 or more") 1 else 0 )
y <- reactive(input$MHL3)
MHL3non <- reactive( if (y()=="No") 1 else 0 )
MHL3isolee <- reactive( if (y()=="Isolated") 1 else 0 )
X <- reactive(data.frame(Sexe = as.integer(input$SEXE),
Age_L3 = input$AGE,
log_SSP1 = log(input$SSP1),
log_SSP2 = log(input$SSP2),
Resection.primitif = as.integer(input$RP),
Protocole_L1groupebis = as.integer(input$PL1),
Meta.pulm_L3 = as.integer(input$MPL3),
Carcinose_L3 = as.integer(input$CL3),
Nbre.de.site.metastatique_dg_1 = NMSD1(),
Nbre.de.site.metastatique_dg_2etplu = NMSD2(),
Meta.hep_L3_isolée = MHL3isolee(),
Meta.hep_L3_non = MHL3non()
))
g <- reactive(
graph(X = X())
)
runApp('J:/4-Méthodologiste/Antoine/GITHUB/KP-L3/APPLICATION')
ui <- dashboardPage(
dashboardHeader(title = "KP-L3"),
dashboardSidebar(
sidebarMenu(
menuItem("Welcome", tabName = "one"),
menuItem("Calculator", tabName = "two")
)
),
dashboardBody(
tabItems(
tabItem(tabName = "one",
p("welcome !")),
tabItem(tabName = "two",
fluidRow(
box(title = "Patient and cancer characteristics",
width = 4,
radioButtons(inputId = "SEXE",
label = "Sex",
choiceNames = c("M", "F"),
choiceValues = c(1, 0)),
sliderInput(inputId = "AGE",
label = "Age in years",
min = 18,
max = 99,
value = 30),
radioButtons(inputId = "RP",
label = "Primary resection",
choiceNames = c("Yes", "No"),
choiceValues = c(1, 0)),
radioButtons(inputId = "MPL3",
label = "Presence of lung metastasis",
choiceNames = c("Yes", "No"),
choiceValues = c(1, 0)),
radioButtons(inputId = "CL3",
label = "Presence of carcinosis",
choiceNames = c("Yes", "No"),
choiceValues = c(1,0)),
selectInput(inputId = "MHL3",
label = "Presence of hepatic metastasis",
choices = c("No","Isolated","With others")),
selectInput(inputId = "NMSD",
label = "Number of metastatic sites at diagnosis",
choices = c("0","1","2 or more")),
sliderInput(inputId = "SSP1",
label = "Duration of the first line treatment in months",
value = 3,
min = 0.1,
max = 50,
step = 0.1),
radioButtons(inputId = "PL1",
label = "Protocol followed during the first line treatment",
choiceNames = c("Folfirinox", "Others"),
choiceValues = c(1, 0)),
sliderInput(inputId = "SSP2",
label = "Duration of the second line treatment in months",
value = 2,
min = 0.1,
max = 50,
step = 0.1)
),
box(title = "Predicted survival curve",
plotOutput("KM",
hover = hoverOpts("plot_hover")),
verbatimTextOutput("EV"),
downloadButton("png","Download in PNG", class = "pull-right"))
#box(title = "Esperance de vie",
#    ),
#                        box(title = "Table",
#                            dataTableOutput("table_pred"),
#                            height = 450,
#                            column(2,align = "center",downloadButton("csv","Download in CSV", class = "butt")))
))
)
)
)
server <- function(input, output){
model_final <- function(X){
model <- X
for(cov in names(X)){
model[,cov] <- X[,cov]*table_resultats[cov,"AVG"]
}
sum.model <- rowSums(model, na.rm = TRUE)
pred.temp <- 0
for(i in 1:(nb_ech_bootstrap*nb_BDD_completes)){
tmp <- exp(matrix(exp(sum.model))%*%t(as.matrix(-1*RES$H0B[,i+1])))
tmp[is.na(tmp)] <- 1
pred.temp <- pred.temp + tmp
}
pred <- pred.temp/(nb_ech_bootstrap*nb_BDD_completes)
table.temp <- data.frame(time = c(0,TIME$time), pred = c(1,pred[1,]))
median <- table.temp[table.temp$pred==max(table.temp[table.temp$pred<=0.5,]$pred),]$time
list(model = sum.model, table = table.temp, median = median)
}
graph <- function(X){
ggplot(model_final(X)$table,aes(x = time, y = pred)) +
geom_step(color ="dodgerblue1" )+
labs(
x = "Survival time (months)",
y = "Progression-free survival") +
theme_linedraw() +
ylim(c(0,1)) +
geom_point_interactive(aes(tooltip = stations), size = 2)
# Voir la description de cette ligne de commande juste en dessous du graphique.
ggiraph(code = print(graph))
}
x <- reactive(input$NMSD)
NMSD1 <- reactive( if (x()=="1") 1 else 0 )
NMSD2 <- reactive( if (x()=="2 or more") 1 else 0 )
y <- reactive(input$MHL3)
MHL3non <- reactive( if (y()=="No") 1 else 0 )
MHL3isolee <- reactive( if (y()=="Isolated") 1 else 0 )
X <- reactive(data.frame(Sexe = as.integer(input$SEXE),
Age_L3 = input$AGE,
log_SSP1 = log(input$SSP1),
log_SSP2 = log(input$SSP2),
Resection.primitif = as.integer(input$RP),
Protocole_L1groupebis = as.integer(input$PL1),
Meta.pulm_L3 = as.integer(input$MPL3),
Carcinose_L3 = as.integer(input$CL3),
Nbre.de.site.metastatique_dg_1 = NMSD1(),
Nbre.de.site.metastatique_dg_2etplu = NMSD2(),
Meta.hep_L3_isolée = MHL3isolee(),
Meta.hep_L3_non = MHL3non()
))
g <- reactive(
graph(X = X())
)
output$KM <- renderPlot({
g()
})
MST <- reactive(rmst(times = model_final(X())$table$time,
surv.rates = model_final(X())$table$pred,
max.time = max(model_final(X())$table$time),
type = "s"))
output$EV <- renderText(paste0("Expected life-time without progression = ", round(MST(), digits = 1), " month(s)"))
output$png <- downloadHandler(
filename = "Survival_PANCREAS_L3_plot.png",
content = function(file){
png(file)
ggsave(file, plot = g(), device = "png")
})
#    data_pred <- reactive(data.frame(Time = format(model_final(X())$table$time, nsmall = 2, digits = 1), Survival = format(model_final(X())$table$pred, digits = 1, nsmall = 3)))
#
#    output$table_pred <- renderDataTable({
#        datatable(data_pred(),
#                  rownames = FALSE,
#                  options = list(pageLength = length(TIME$time)+1,
#                                 scrollY = "250px",
#                                 dom= 't'),
#                  style = "bootstrap4")
#    })
#
#    output$csv <- downloadHandler(
#        filename = "Survival_PANCREAS_L3",
#        content = function(file){
#            write.csv(data_pred(), file, row.names = FALSE)
#        })
}
shinyApp(ui, server)
##########################################TEMP###############################################
load("RES.RData")
table_resultats <- read.csv("table_resultats.csv")
setwd("J:/4-Méthodologiste/Antoine/GITHUB/KP-L3/APPLICATION")
##########################################TEMP###############################################
load("RES.RData")
table_resultats <- read.csv("table_resultats.csv")
tmp <- table_resultats$X
table_resultats <- data.frame(table_resultats[,-1])
row.names(table_resultats) <- tmp
rm(tmp)
nb_ech_bootstrap <- 1000
nb_BDD_completes <- 5
TIME <- read.csv("TIME.csv")
ui <- dashboardPage(
dashboardHeader(title = "KP-L3"),
dashboardSidebar(
sidebarMenu(
menuItem("Welcome", tabName = "one"),
menuItem("Calculator", tabName = "two")
)
),
dashboardBody(
tabItems(
tabItem(tabName = "one",
p("welcome !")),
tabItem(tabName = "two",
fluidRow(
box(title = "Patient and cancer characteristics",
width = 4,
radioButtons(inputId = "SEXE",
label = "Sex",
choiceNames = c("M", "F"),
choiceValues = c(1, 0)),
sliderInput(inputId = "AGE",
label = "Age in years",
min = 18,
max = 99,
value = 30),
radioButtons(inputId = "RP",
label = "Primary resection",
choiceNames = c("Yes", "No"),
choiceValues = c(1, 0)),
radioButtons(inputId = "MPL3",
label = "Presence of lung metastasis",
choiceNames = c("Yes", "No"),
choiceValues = c(1, 0)),
radioButtons(inputId = "CL3",
label = "Presence of carcinosis",
choiceNames = c("Yes", "No"),
choiceValues = c(1,0)),
selectInput(inputId = "MHL3",
label = "Presence of hepatic metastasis",
choices = c("No","Isolated","With others")),
selectInput(inputId = "NMSD",
label = "Number of metastatic sites at diagnosis",
choices = c("0","1","2 or more")),
sliderInput(inputId = "SSP1",
label = "Duration of the first line treatment in months",
value = 3,
min = 0.1,
max = 50,
step = 0.1),
radioButtons(inputId = "PL1",
label = "Protocol followed during the first line treatment",
choiceNames = c("Folfirinox", "Others"),
choiceValues = c(1, 0)),
sliderInput(inputId = "SSP2",
label = "Duration of the second line treatment in months",
value = 2,
min = 0.1,
max = 50,
step = 0.1)
),
box(title = "Predicted survival curve",
plotOutput("KM",
hover = hoverOpts("plot_hover")),
verbatimTextOutput("EV"),
downloadButton("png","Download in PNG", class = "pull-right"))
#box(title = "Esperance de vie",
#    ),
#                        box(title = "Table",
#                            dataTableOutput("table_pred"),
#                            height = 450,
#                            column(2,align = "center",downloadButton("csv","Download in CSV", class = "butt")))
))
)
)
)
server <- function(input, output){
model_final <- function(X){
model <- X
for(cov in names(X)){
model[,cov] <- X[,cov]*table_resultats[cov,"AVG"]
}
sum.model <- rowSums(model, na.rm = TRUE)
pred.temp <- 0
for(i in 1:(nb_ech_bootstrap*nb_BDD_completes)){
tmp <- exp(matrix(exp(sum.model))%*%t(as.matrix(-1*RES$H0B[,i+1])))
tmp[is.na(tmp)] <- 1
pred.temp <- pred.temp + tmp
}
pred <- pred.temp/(nb_ech_bootstrap*nb_BDD_completes)
table.temp <- data.frame(time = c(0,TIME$time), pred = c(1,pred[1,]))
median <- table.temp[table.temp$pred==max(table.temp[table.temp$pred<=0.5,]$pred),]$time
list(model = sum.model, table = table.temp, median = median)
}
graph <- function(X){
ggplot(model_final(X)$table,aes(x = time, y = pred)) +
geom_step(color ="dodgerblue1" )+
labs(
x = "Survival time (months)",
y = "Progression-free survival") +
theme_linedraw() +
ylim(c(0,1)) +
geom_point_interactive(aes(tooltip = stations), size = 2)
# Voir la description de cette ligne de commande juste en dessous du graphique.
ggiraph(code = print(graph))
}
x <- reactive(input$NMSD)
NMSD1 <- reactive( if (x()=="1") 1 else 0 )
NMSD2 <- reactive( if (x()=="2 or more") 1 else 0 )
y <- reactive(input$MHL3)
MHL3non <- reactive( if (y()=="No") 1 else 0 )
MHL3isolee <- reactive( if (y()=="Isolated") 1 else 0 )
X <- reactive(data.frame(Sexe = as.integer(input$SEXE),
Age_L3 = input$AGE,
log_SSP1 = log(input$SSP1),
log_SSP2 = log(input$SSP2),
Resection.primitif = as.integer(input$RP),
Protocole_L1groupebis = as.integer(input$PL1),
Meta.pulm_L3 = as.integer(input$MPL3),
Carcinose_L3 = as.integer(input$CL3),
Nbre.de.site.metastatique_dg_1 = NMSD1(),
Nbre.de.site.metastatique_dg_2etplu = NMSD2(),
Meta.hep_L3_isolée = MHL3isolee(),
Meta.hep_L3_non = MHL3non()
))
g <- reactive(
graph(X = X())
)
output$KM <- renderPlot({
g()
})
MST <- reactive(rmst(times = model_final(X())$table$time,
surv.rates = model_final(X())$table$pred,
max.time = max(model_final(X())$table$time),
type = "s"))
output$EV <- renderText(paste0("Expected life-time without progression = ", round(MST(), digits = 1), " month(s)"))
output$png <- downloadHandler(
filename = "Survival_PANCREAS_L3_plot.png",
content = function(file){
png(file)
ggsave(file, plot = g(), device = "png")
})
#    data_pred <- reactive(data.frame(Time = format(model_final(X())$table$time, nsmall = 2, digits = 1), Survival = format(model_final(X())$table$pred, digits = 1, nsmall = 3)))
#
#    output$table_pred <- renderDataTable({
#        datatable(data_pred(),
#                  rownames = FALSE,
#                  options = list(pageLength = length(TIME$time)+1,
#                                 scrollY = "250px",
#                                 dom= 't'),
#                  style = "bootstrap4")
#    })
#
#    output$csv <- downloadHandler(
#        filename = "Survival_PANCREAS_L3",
#        content = function(file){
#            write.csv(data_pred(), file, row.names = FALSE)
#        })
}
shinyApp(ui, server)
library(ggiraph)
library(ggplot2)
geom_point_inter()
geom_point_interactive()
geom_point_interactive()
version()
sessionInfo()
detach("package:ggplot2", unload = TRUE)
library(ggplot2)
library(ggiraph)
geom_point_interactive()
x = "Survival time (months)",
y = "Progression-free survival") +
theme_linedraw() +
ylim(c(0,1)) +
geom_line_interactive(aes(tooltip = stations), size = 2)
geom_line_interactive()
library(ggiraph)
library(ggiraph)
geom_line_interactive()
shiny::runApp()
runApp()
time
runApp()
runApp()
runApp()
library(plotly)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
load("C:/Users/472424/AppData/Local/Temp/Rar$DIa1812.36335/modeles_RShiny.RData")
runApp('J:/4-Méthodologiste/Antoine/GITHUB/KP-L3/APPLICATION')
